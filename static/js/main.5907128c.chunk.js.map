{"version":3,"sources":["Element/Element.module.css","Element/SignText/SignText.module.css","Element/Description/Description.module.css","redux/reduxStore.js","Element/Circle/Circle.jsx","Element/Description/Description.jsx","Element/SignText/SignText.jsx","Element/Element.jsx","Element/ElementContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initState","select","currentText","taste","signText","weight","currentWeight","status","elementsCount","changeTextOverAC","index","operation","type","store","createStore","state","action","stateCopy","Circle","props","className","s","circle","selectClassName","onClick","undefined","changeWeight","Description","selectMas","map","elem","Number","isInteger","key","elementDescription","inscription","active","SignText","elementSignText","style","color","selectElement","printText","Element","ended","element","elementItem","onMouseLeave","changeTextOver","onMouseEnter","changeTextEnter","elementCorner","elementImage","elementImageItem","e","stopPropagation","isEnded","ElementContainer","connect","ownProps","dispatch","changeWeightAC","selectElementAC","App","elements","i","push","Boolean","window","location","hostname","match","ReactDOM","render","getState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5907128c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"elementItem\":\"Element_elementItem__3LneH\",\"circle\":\"Element_circle__2YRgl\",\"elementCorner\":\"Element_elementCorner__1Ged2\",\"active\":\"Element_active__3BcJo\",\"ended\":\"Element_ended__3-NIg\",\"elementImage\":\"Element_elementImage__3EO0P\",\"elementImageItem\":\"Element_elementImageItem__KND8b\",\"isEnded\":\"Element_isEnded__2WobI\",\"element\":\"Element_element__1E_O1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elementSignText\":\"SignText_elementSignText__3oJ8v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elementDescription\":\"Description_elementDescription__aUjwM\",\"inscription\":\"Description_inscription__1ORYp\",\"active\":\"Description_active__MzKQw\"};","import { createStore } from \"redux\";\r\n\r\nconst CHANGE_IS_ACTIVE = 'CHANGE_IS_ACTIVE';\r\nconst CHANGE_DESCRIPTION_TEXT = 'CHANGE_DESCRIPTION_TEXT';\r\nconst CHANGE_WEIGHT = 'CHANGE_WEIGHT';\r\n\r\nlet initState = {\r\n    // описание выбранной порции\r\n    select: [\r\n        [10, ' порций', ' мышь в подарок'],\r\n        [40, ' порций', 2, ' мыши в подарок'],\r\n        [100, ' порций', 5, ' мышей в подарок', ' заказчик доволен']\r\n    ],\r\n    // Номер текущего текста, меняющегося в активной упаковке\r\n    currentText: [0, 0, 0],\r\n    // Начинки\r\n    taste: [\r\n        'с фуа-гра',\r\n        'с рыбой',\r\n        'с курой'\r\n    ],\r\n    // Подпись под упаковкой с различными начинками\r\n    signText: [\r\n        ['Чего сидишь? Порадуй котэ, ',\r\n            'Печень утки разварная с артишоками.',\r\n            'Печалька, с фуа-гра закончился.'],\r\n\r\n        ['Чего сидишь? Порадуй котэ, ',\r\n            'Филе из цыплят с трюфелями в бульоне',\r\n            'Печалька, с рыбой закончился.'],\r\n\r\n        ['Чего сидишь? Порадуй котэ, ',\r\n            'Печень утки разварная с артишоками.',\r\n            'Печалька, с курой закончился.'],\r\n    ],\r\n    // Список всех доступных объемов порции\r\n    weight: ['0,5', '2', '5'],\r\n    // текущий выбранный объем упаковок\r\n    currentWeight: [0, 1, 2],\r\n    // статус упаковок обычная, выбранная, или закончилась\r\n    status: ['normal', 'active', 'end'],\r\n    elementsCount: 3\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let index = action.index;\r\n    let stateCopy = {...state};\r\n    switch (action.type) {\r\n        case 'CHANGE_IS_ACTIVE': // сделать упаковку активной\r\n            stateCopy.status = [ ...state.status];\r\n            stateCopy.status[index] =\r\n                state.status[index] === 'normal' ? 'active' : 'normal';\r\n            return stateCopy;\r\n        case 'CHANGE_DESCRIPTION_TEXT': //смена текста, при наведении и отвода мыши\r\n            stateCopy.currentText = [...state.currentText]\r\n            stateCopy.currentText[index] = action.operation;\r\n            return stateCopy;\r\n        case 'CHANGE_WEIGHT': //смена объема упаковки\r\n            stateCopy.currentWeight = [...state.currentWeight]\r\n            stateCopy.currentWeight[index] =\r\n                (state.currentWeight[index] === 2) ?\r\n                    0 : state.currentWeight[index] + 1;\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const selectElementAC = (index) => ({ type: CHANGE_IS_ACTIVE, index: index });\r\nexport const changeTextOverAC = (index, operation) =>\r\n    ({ type: CHANGE_DESCRIPTION_TEXT, index: index, operation: operation });\r\nexport const changeWeightAC = (index) => ({ type: CHANGE_WEIGHT, index: index });\r\n\r\nlet store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport s from '../Element.module.css'\r\n\r\nconst Circle = (props) => {\r\n        return <div className={`${s.circle} ${props.selectClassName()}`}>\r\n        <span onClick={props.status===\"end\"? undefined: props.changeWeight}>{props.weight[props.currentWeight]}</span><br />\r\n        <p>кг</p>\r\n    </div>\r\n}\r\n\r\nexport default Circle","import React from 'react';\r\nimport s from './Description.module.css'\r\n\r\nconst Description = (props) => {\r\n\r\n    let currentText = () => {\r\n        if (props.currentText === 0)\r\n            return <p className={s.inscription}>Сказочное заморское яство</p>\r\n        else\r\n            return <p className={s.inscription + ' ' + s.active}>Котэ не одобряет?</p>\r\n    };\r\n    \r\n    // создается массив JSX с необходимым форматированием текста(Числа выделены жирным)\r\n    let selectMas = props.select.map((elem, index) => {\r\n        if (Number.isInteger(elem))\r\n            return <b key={index}>{elem}</b>\r\n        else\r\n        return <span key={index}>{elem}<br/></span> \r\n});\r\n\r\nreturn <div className={s.elementDescription}>\r\n    {currentText()}\r\n    <h2>Нямушка</h2>\r\n    <h3>{props.taste}</h3>\r\n    <div>{selectMas}</div>\r\n</div>\r\n}\r\n\r\nexport default Description\r\n","import React from 'react';\r\nimport s from './SignText.module.css'\r\n\r\nconst SignText = (props) => {\r\n\r\n    let printText = () => {\r\n        switch (props.status) {\r\n            case \"active\":\r\n                return <p>{props.signText[1]}</p>;\r\n            case \"end\":\r\n                return <p style={{color: '#ffff66'}}>{props.signText[2]}</p>;\r\n            default:\r\n                return <p>{props.signText[0]} <span onClick={props.selectElement}>купи.</span></p>;\r\n        }\r\n    }\r\n    \r\n    return <div className={s.elementSignText}>\r\n        {printText()}\r\n    </div>\r\n}\r\n\r\nexport default SignText\r\n","import React from 'react';\r\nimport Circle from './Circle/Circle';\r\nimport Description from './Description/Description';\r\nimport s from './Element.module.css'\r\nimport SignText from './SignText/SignText';\r\n\r\n\r\nconst Element = (props) => {\r\n    \r\n    let index = props.index;\r\n    let status = props.status[index];\r\n    \r\n    let changeWeight = (e) => {\r\n        e.stopPropagation();\r\n        props.changeWeight(index);\r\n    }\r\n    let selectElement = () => {\r\n        props.selectElement(index);\r\n    }\r\n    let changeTextOver = () => {\r\n        props.changeTextOver(index);\r\n    }\r\n    let changeTextEnter = () => {\r\n        props.changeTextEnter(index);\r\n    }\r\n\r\n    // Добавляем новый класс к элементам, для смены стилей при смене выбора упаковки\r\n    let selectClassName = () => {\r\n        switch (status) {\r\n            case 'active':\r\n                return s.active;\r\n            case 'end':\r\n                return s.ended;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    return (\r\n        <div className={s.element}>\r\n            <div className={`${s.elementItem} ${selectClassName()}`}\r\n                onClick={status === \"end\" ? undefined : selectElement}\r\n                onMouseLeave={status === \"active\" ? changeTextOver : undefined}\r\n                onMouseEnter={status === \"active\" ? changeTextEnter : undefined}>\r\n                {/* Элемент с классом elementCorner отвечает за отрисовку верхней части\r\n                упаковки, в которой срезан левый угол*/}\r\n\r\n                <div className={`${s.elementCorner} ${selectClassName()}`}></div>\r\n\r\n                <Description\r\n                    select={props.select[props.currentWeight[index]]}\r\n                    taste={props.taste[index]}\r\n                    currentText={props.currentText[index]} />\r\n\r\n                <div className={s.elementImage}>\r\n                    <div className={s.elementImageItem}></div>\r\n                </div>\r\n\r\n                <Circle weight={props.weight}\r\n                    currentWeight={props.currentWeight[index]}\r\n                    index={index}\r\n                    status={status}\r\n                    selectClassName={selectClassName} \r\n                    changeWeight={changeWeight}/>\r\n\r\n                <div className={`${s.isEnded} ${selectClassName()}`}></div>\r\n            </div>\r\n\r\n            <SignText index={index}\r\n                selectElement={selectElement}\r\n                signText={props.signText[index]}\r\n                status={status} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Element\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeTextOverAC, selectElementAC, changeWeightAC } from '../redux/reduxStore';\r\nimport Element from './Element';\r\n\r\nlet mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        status: state.status,\r\n        select: state.select,\r\n        currentWeight: state.currentWeight,\r\n        taste: state.taste,\r\n        currentText: state.currentText,\r\n        signText: state.signText,\r\n        weight: state.weight,\r\n        index: ownProps.index\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // функция смена объема упаковки\r\n        changeWeight: (index) => {\r\n            dispatch(changeWeightAC(index));\r\n        },\r\n        // меняем упаковку на выбранную и наоборот\r\n        selectElement: (index) => {\r\n            dispatch(selectElementAC(index));\r\n        },\r\n\r\n        // Функции отвечающие за смену текста активной упаковке при наведеннии на нее и ухода\r\n        changeTextOver: (index) => {\r\n            dispatch(changeTextOverAC(index, 1));\r\n        },\r\n        changeTextEnter: (index) => {\r\n            dispatch(changeTextOverAC(index, 0));\r\n        }\r\n    }\r\n}\r\n\r\nconst ElementContainer = connect(mapStateToProps, mapDispatchToProps)(Element);\r\nexport default ElementContainer\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ElementContainer from './Element/ElementContainer';\r\n\r\nconst App = (props) => {\r\n\r\n  let elements = [];\r\n  for (let i = 0; i < props.elementsCount; i++)\r\n    elements.push(<ElementContainer key={i} index={i} />)\r\n  return (\r\n    <div className='App'>\r\n      <div className='upShadow'></div>\r\n      <div className='downShadow'></div>\r\n      {/*upShadow, downShadow  элементы необходимые для прорисовки верхнейи нижней тени соответственно*/}\r\n      <div className='content'>\r\n        <div className='article'>\r\n          <h1>Ты сегодня покормил кота?</h1>\r\n        </div>\r\n        {/* Элемент для отображения упаковок.\r\nкомпонента Element отрисовывает упаковку  */}\r\n        <div className='elements'>\r\n          {elements}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/reduxStore';\r\nimport { Provider } from 'react-redux';\r\n\r\nlet rerenderEntireTree = () => {\r\n  ReactDOM.render(\r\n    <Provider store = {store}>\r\n      <App elementsCount={store.getState().elementsCount}/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n  );\r\n};\r\nrerenderEntireTree();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}